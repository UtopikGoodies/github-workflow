name: Clean Up

on:
  workflow_call:
    inputs:
      repository:
        description: 'The organisation/repository to clean up packages for'
        type: string
        default: ${{ github.repository }}
      prefix:
        description: 'The prefix to use for the package versions'
        type: string
        default: 'pr.'
    secrets:
      github-token:
        description: 'The GitHub token to use for API requests'

env:
  PACKAGE_TYPES: '["container", "npm"]'
  # PACKAGE_TYPES: '["container", "npm", "maven", "rubygems", "docker", "nuget"]'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      organisation: ${{ env.ORGANISATION }}
      repository: ${{ env.REPOSITORY }}
      package_type: ${{ env.PACKAGE_TYPES }}
    steps:
      - name: Set outputs
        id: meta
        run: |
          echo "ORGANISATION=$(echo ${{ inputs.repository }} | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "REPOSITORY=$(echo ${{ inputs.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV

  pullrequests-information:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      numbers: ${{ steps.pullrequests.outputs.numbers }}
    steps:
      - name: Get all closed pull requests
        id: pullrequests
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        run: |
          response=$(gh api /repos/${{ inputs.repository }}/pulls)
          # echo "$response"
          # numbers=$(jq -c '[.[] | select(.state=="closed") | .number]' <<<"$response")
          numbers=$(jq -c '[.[] | select(.state=="open") | .number]' <<<"$response") #TODO:DEBUG: Uncomment the above line, remove this line

          echo "numbers=$numbers"
          echo "numbers=$numbers" >> $GITHUB_OUTPUT

  packages-information:
    needs: [setup, pullrequests-information]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        package_type: ${{ fromJson(needs.setup.outputs.package_type) }}
    # outputs:
    #   packages: ${{ steps.export.outputs.packages }}
    steps:
      - name: Get all ${{ matrix.package_type }} packages
        id: packages
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        run: |
          response=$(gh api /orgs/${{ needs.setup.outputs.organisation }}/packages?package_type=${{ matrix.package_type }})
          # echo "$response"
          packages=$(jq -c '[.[] | .name]' <<<"$response")

          echo "names=$packages"
          echo "names=$packages" >> $GITHUB_OUTPUT

      - name: Get all packages versions
        id: versions
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        run: |
          versions=()
          packages='${{ steps.packages.outputs.names }}'
          for package in $(jq -r '.[]' <<<"$packages"); do
            echo "package=$package"
            response=$(gh api /orgs/${{ needs.setup.outputs.organisation }}/packages/${{ matrix.package_type }}/${package}/versions)
            echo "$response"
            versions+=($(jq -c --arg package "$package" '.[] | select((.name | contains("${{ inputs.prefix }}")) or (.metadata.package_type == "container" and .metadata.container.tags | contains(["pr.23"]))) | {id, name, package: $package}' <<<"$response"))
          done
          
          versions=[$(IFS=,; echo "${versions[*]}")]
          echo "versions=$versions"
          echo "versions=$versions" >> $GITHUB_OUTPUT

      - name: Delete package version
        env:
          GH_TOKEN: ${{ secrets.github-token || github.token }}
        run: |
          versions='${{ steps.versions.outputs.versions }}'
          for row in $(echo "${versions}" | jq -r '.[] | @base64'); do
            _jq() {
            echo ${row} | base64 --decode | jq -r ${1}
            }
            echo "Delete version $(_jq .name) of $(_jq .package)"
            result=$(gh api -X DELETE /orgs/${{ needs.setup.outputs.organisation }}/packages/${{ matrix.package_type }}/$(_jq .package)/versions/$(_jq .id))
            echo "$result"
          done

          