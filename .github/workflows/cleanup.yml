name: Clean Up

on:
  workflow_call:
    inputs:
      repository:
        description: 'The organisation/repository to clean up packages for'
        type: string
        default: ${{ github.repository }}
      prefix:
        description: 'The prefix to use for the package versions'
        type: string
        default: 'pr.'
    secrets:
      github-token:
        description: 'The GitHub token to use for API requests'

env:
  PACKAGE_TYPES: '["container", "npm"]'
  # PACKAGE_TYPES: '["container", "npm", "maven", "rubygems", "docker", "nuget"]'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      organisation: ${{ env.ORGANISATION }}
      repository: ${{ env.REPOSITORY }}
      package_type: ${{ env.PACKAGE_TYPES }}
    steps:
      - name: Set outputs
        id: meta
        run: |
          echo "ORGANISATION=$(echo ${{ inputs.repository }} | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "REPOSITORY=$(echo ${{ inputs.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV

  pullrequests-information:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      numbers: ${{ steps.pullrequests.outputs.numbers }}
    steps:
      - name: Get all closed pull requests
        id: pullrequests
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        run: |
          response=$(gh api /repos/${{ inputs.repository }}/pulls)
          # echo "$response"
          # numbers=$(jq -c '[.[] | select(.state=="closed") | .number]' <<<"$response")
          numbers=$(jq -c '[.[] | select(.state=="open") | .number]' <<<"$response") #TODO:DEBUG: Uncomment the above line, remove this line

          echo "numbers=$numbers"
          echo "numbers=$numbers" >> $GITHUB_OUTPUT

  packages-information:
    needs: [setup, pullrequests-information]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        package_type: ${{ fromJson(needs.setup.outputs.package_type) }}
    outputs:
      packages: ${{ steps.export.outputs.packages }}
    steps:
      - name: Get all ${{ matrix.package_type }} packages
        id: packages
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        run: |
          response=$(gh api /orgs/${{ needs.setup.outputs.organisation }}/packages?package_type=${{ matrix.package_type }})
          # echo "$response"
          packages=$(jq -c '[.[] | .name]' <<<"$response")

          echo "packages=$packages"
          echo "names=$packages" >> $GITHUB_OUTPUT

      - name: Get all packages versions
        id: versions
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        run: |
          for package in ${{ steps.packages.outputs.names }}; do
            response=$(gh api /orgs/${{ needs.setup.outputs.organisation }}/packages/${{ matrix.package_type }}/${package}/versions)
            echo "$response"
            versions+=($(jq -c '[.[] | select(.name | contains("${{ inputs.prefix }}")) | {id, name}]' <<<"$response"))
          done
          
          echo "versions=$versions"

      # - name: Export packages information
      #   id: export
      #   run: |
      #     names_json='${{ steps.packages.outputs.names }}'
      #     echo "names_json=$names_json"
      #     numbers_json='${{ needs.pullrequests-information.outputs.numbers }}'
      #     echo "numbers_json=$numbers_json"
      
      #     packages=$(jq -n \
      #       --argjson names "$names_json" \
      #       --argjson numbers "$numbers_json" \
      #       'reduce range(0; $names|length) as $i ({}; . + {($names[$i]): {versions: [("${{ inputs.prefix }}" + ($numbers[$i] | tostring))]}})')
      #     echo "packages=$packages"
      #     echo "$packages" > packages-${{ matrix.package_type }}.json

      - name: Upload packages information
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.package_type }}
          path: packages-${{ matrix.package_type }}.json

  # generate-matrix:
  #   needs: [setup, packages-information]
  #   runs-on: ubuntu-latest
  #   outputs:
  #     packages: ${{ steps.matrix.outputs.packages }}
  #     packages_name_version: ${{ steps.matrix.outputs.packages_name }}
  #   steps:
  #     - name: Download packages information
  #       id: download
  #       uses: actions/download-artifact@v4
  #       with:
  #         merge-multiple: true

  #     - name: Set matrix
  #       id: matrix
  #       run: |
  #         packages=$(jq -c -s 'add' packages-*.json)
          
  #         echo "packages=$packages"
  #         echo "packages=$packages" >> $GITHUB_OUTPUT
          
  #         # packages_name_version=$(echo $packages | jq -c -r '[to_entries[] | .key + ": " + (.value.versions[] | tostring)]')
  #         # echo "packages_name_version=$packages_name_version"
  #         # echo "packages_name_version=$packages_name_version" >> $GITHUB_OUTPUT

  # remove-packages:
  #   needs: [setup, generate-matrix]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       package_name_version: ${{ fromJson(needs.generate-matrix.outputs.packages_name_version) }}
  #   steps:
  #     - name: Extract package name and version
  #       id: extract
  #       run: |
  #         echo "package_name=$(echo "${{ matrix.package_name_version }}" | cut -d '.' -f 1)" >> $GITHUB_OUTPUT
  #         echo "package_version=$(echo "${{ matrix.package_name_version }}" | cut -d '.' -f 2)" >> $GITHUB_OUTPUT

    # uses: ./.github/workflows/github-package-delete.yml
    # with:
    #   github-organisation: ${{ needs.setup.outputs.organisation }}
    #   package-type: ${{ matrix.packages.type }}
    #   package-name: ${{ matrix.packages.name }}
    #   package-version: ${{ matrix.packages.version }}

  # clean-up:
  #   if: false
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Delete Versions of Packages for Closed PRs
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.WORKFLOW_TOKEN }}
  #         script: |
  #           const org = context.repo.owner;
  #           const repo = context.repo.repo;

  #           const packageTypes = ['container', 'npm', 'maven', 'rubygems', 'docker', 'nuget'];

  #           async function safeApiCall(apiPromise, description) {
  #             try {
  #               const response = await apiPromise;
  #               console.log(`Success: ${description}`);
  #               return response;
  #             } catch (error) {
  #               console.error(`API Error for ${description}:`, error);
  #               return null;
  #             }
  #           }

  #           const closedPrsResponse = await safeApiCall(
  #             github.rest.pulls.list({
  #               owner: org,
  #               repo: repo,
  #               state: 'closed'
  #             }), 
  #             'Fetching closed PRs'
  #           );
  #           if (!closedPrsResponse) return;

  #           const closedPrNumbers = closedPrsResponse.data.map(pr => pr.number);

  #           for (const packageType of packageTypes) {
  #             console.log(`Checking package type: ${packageType}`);

  #             let packagesResponse;
  #             try {
  #               packagesResponse = await github.rest.packages.listPackagesForOrganization({
  #                 org: org,
  #                 package_type: packageType
  #               });
  #             } catch (error) {
  #               console.error(`Error fetching packages of type ${packageType}:`, error);
  #               continue;
  #             }

  #             for (const package of packagesResponse.data) {
  #               const packageName = package.name;
  #               console.log(`Checking package: ${packageName}`);

  #               const versionsResponse = await safeApiCall(
  #                 github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
  #                   org: org,
  #                   package_type: packageType,
  #                   package_name: packageName
  #                 }),
  #                 `Fetching versions for package ${packageName}`
  #               );
  #               if (!versionsResponse) continue;

  #               for (const version of versionsResponse.data) {
  #                 let prNumberMatch;
  #                 if (packageType === 'container' || packageType === 'docker') {
  #                   // For container and docker, use the tag
  #                   const versionTags = version.metadata.container.tags;
  #                   for (const tag of versionTags) {
  #                     prNumberMatch = tag.match(/.(\d+)$/);
  #                     if (prNumberMatch && closedPrNumbers.includes(parseInt(prNumberMatch[1]))) {
  #                       break; // Break the loop if a matching PR number is found
  #                     }
  #                   }
  #                 } else {
  #                   // For maven, rubygems, nuget, use the version name
  #                   prNumberMatch = version.name.match(/.(\d+)$/);
  #                 }

  #                 if (prNumberMatch && closedPrNumbers.includes(parseInt(prNumberMatch[1]))) {
  #                   console.log(`Deleting package version ${version.id} of ${packageName} for closed PR #${prNumberMatch[1]}`);
  #                   await safeApiCall(
  #                     github.rest.packages.deletePackageVersionForOrg({
  #                       org: org,
  #                       package_type: packageType,
  #                       package_name: packageName,
  #                       package_version_id: version.id,
  #                     }),
  #                     `Deleting package version ${version.id} of ${packageName}`
  #                   );
  #                 }
  #               }
  #             }
  #           }
