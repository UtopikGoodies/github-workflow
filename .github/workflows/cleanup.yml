name: Clean Up

on:
  workflow_call:
    inputs:
      github-repository:
        description: 'The organisation/repository to clean up packages for'
        type: string
        default: ${{ github.repository }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      organisation: ${{ env.ORGANISATION }}
      repository: ${{ env.REPOSITORY }}
    steps:
      - name: Set outputs
        id: meta
        run: |
          echo "ORGANISATION=$(echo ${{ github.repository }} | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "REPOSITORY=$(echo ${{ github.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV

  get-closed-pr-packages:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package_type: [npm]
        # package_type: [container, npm, maven, rubygems, docker, nuget]
    steps:
      - name: Get all closed pull requests
        id: pullrequests
        env:
          GH_TOKEN: ${{ secrets.github-token || github.token }}
        run: |
          response=$(gh api /repos/${{ inputs.github-repository }}/pulls)
          # echo "$response"
          if jq -e . >/dev/null 2>&1 <<<"$response"; then
            # pulls=$(jq -j '[.[] | select(.state=="closed") | .number]' <<<"$response" | tr -d '\n')
            pulls=$(jq -j '[.[] | select(.state=="open") | .number]' <<<"$response" | tr -d '\n') #TODO:DEBUG: Uncomment the above line, remove this line
          fi

          echo "pulls=$pulls"
          echo "numbers=$pulls" >> $GITHUB_OUTPUT

      - name: Get all ${{ matrix.package_type }} packages
        id: packages
        env:
          GH_TOKEN: ${{ secrets.github-token || github.token }}
        run: |

          # response=$(gh api /orgs/${{ needs.setup.outputs.organisation }}/packages?package_type=${{ matrix.package_type }})
          # packages=$(jq -n --argjson pulls "${{ steps.pullrequests.outputs.numbers }}" --argjson pkgs "$response" '$pkgs | map({(.name): {version: pr.$pulls}}) | add' <<<"$response")
          # echo "packages=$packages"

          response=$(gh api /orgs/${{ needs.setup.outputs.organisation }}/packages?package_type=${{ matrix.package_type }})
          # echo "$response"
          if jq -e . >/dev/null 2>&1 <<<"$response"; then
            packages=$(jq -j '[.[] | .name]' <<<"$response" | tr -d '\n')
            # packages=$(jq -j 'map({name})' <<<"$response" | tr -d '\n')
          fi

          echo "packages=$packages"
          echo "names=$packages" >> $GITHUB_OUTPUT

      # - name: Get all versions of ${{ matrix.package_type }} packages
      #   id: versions
      #   env:
      #     GH_TOKEN: ${{ secrets.github-token || github.token }}
      #   run: |
      #     response=$(gh api /orgs/${{ needs.setup.outputs.organisation }}/packages/${{ matrix.package_type }}/${{ steps.packages.outputs.packages }}/versions)
      #     echo "$response"
      #     if jq -e . >/dev/null 2>&1 <<<"$response"; then
      #       versions=$(jq -r '.[] | .name' <<<"$response")
      #     fi

      #     echo "versions=$versions"
      #     echo "versions=$versions" >> $GITHUB_OUTPUT

      - name: Output
        id: output
        run: |
          # packages=$(jq -n --argjson pulls "${{ steps.pullrequests.outputs.numbers }}" --argjson pkgs "${{ steps.packages.outputs.names }}" '$pkgs | map({($pkgs): {version: ("pr." + $pulls)}}) | add' <<<"$(echo "${{ steps.packages.outputs.names }}" | jq -c .)")

          packages=$(jq -n --argjson names "${{ steps.packages.outputs.names }}" --argjson numbers "${{ steps.pullrequests.outputs.numbers }}" 'reduce range(0; $names|length) as $i ({}; . + {($names[$i]): $numbers[$i]})')
          echo "packages=$packages"

  # remove-packages:
  #   needs: [setup, get-closed-pr-packages]
  #   strategy:
  #     matrix:
  #       packages: ${{ needs.get-closed-pr-packages.outputs.packages }}
  #   uses: ./.github/workflows/github-package-delete.yml
  #   with:
  #     github-organisation: ${{ needs.setup.outputs.organisation }}
  #     package-type: ${{ matrix.packages.type }}
  #     package-name: ${{ matrix.packages.name }}
  #     package-version: ${{ matrix.packages.version }}

  clean-up:
    if: false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Delete Versions of Packages for Closed PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          script: |
            const org = context.repo.owner;
            const repo = context.repo.repo;

            const packageTypes = ['container', 'npm', 'maven', 'rubygems', 'docker', 'nuget'];

            async function safeApiCall(apiPromise, description) {
              try {
                const response = await apiPromise;
                console.log(`Success: ${description}`);
                return response;
              } catch (error) {
                console.error(`API Error for ${description}:`, error);
                return null;
              }
            }

            const closedPrsResponse = await safeApiCall(
              github.rest.pulls.list({
                owner: org,
                repo: repo,
                state: 'closed'
              }), 
              'Fetching closed PRs'
            );
            if (!closedPrsResponse) return;

            const closedPrNumbers = closedPrsResponse.data.map(pr => pr.number);

            for (const packageType of packageTypes) {
              console.log(`Checking package type: ${packageType}`);

              let packagesResponse;
              try {
                packagesResponse = await github.rest.packages.listPackagesForOrganization({
                  org: org,
                  package_type: packageType
                });
              } catch (error) {
                console.error(`Error fetching packages of type ${packageType}:`, error);
                continue;
              }

              for (const package of packagesResponse.data) {
                const packageName = package.name;
                console.log(`Checking package: ${packageName}`);

                const versionsResponse = await safeApiCall(
                  github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                    org: org,
                    package_type: packageType,
                    package_name: packageName
                  }),
                  `Fetching versions for package ${packageName}`
                );
                if (!versionsResponse) continue;

                for (const version of versionsResponse.data) {
                  let prNumberMatch;
                  if (packageType === 'container' || packageType === 'docker') {
                    // For container and docker, use the tag
                    const versionTags = version.metadata.container.tags;
                    for (const tag of versionTags) {
                      prNumberMatch = tag.match(/.(\d+)$/);
                      if (prNumberMatch && closedPrNumbers.includes(parseInt(prNumberMatch[1]))) {
                        break; // Break the loop if a matching PR number is found
                      }
                    }
                  } else {
                    // For maven, rubygems, nuget, use the version name
                    prNumberMatch = version.name.match(/.(\d+)$/);
                  }

                  if (prNumberMatch && closedPrNumbers.includes(parseInt(prNumberMatch[1]))) {
                    console.log(`Deleting package version ${version.id} of ${packageName} for closed PR #${prNumberMatch[1]}`);
                    await safeApiCall(
                      github.rest.packages.deletePackageVersionForOrg({
                        org: org,
                        package_type: packageType,
                        package_name: packageName,
                        package_version_id: version.id,
                      }),
                      `Deleting package version ${version.id} of ${packageName}`
                    );
                  }
                }
              }
            }
